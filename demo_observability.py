#!/usr/bin/env python3
"""
Demo del sistema de observabilidad avanzada.

Este script demuestra las capacidades del sistema:
- M√©tricas de rendimiento
- Trazabilidad
- Dashboard de KPIs
- Herramienta de monitoreo
"""

import time
import random
from src.core.observability import span, get_metrics_summary, reset_metrics
from src.core.metrics_dashboard import get_kpis, update_dashboard
from src.tools.monitor import MonitorTool, MonitorIn


def simulate_agent_operations():
    """Simula operaciones t√≠picas de un agente ReAct."""
    
    print("ü§ñ Simulando operaciones del agente...")
    
    # Simular diferentes tipos de operaciones
    operations = [
        ("planner", 0.1, 0.05),
        ("reasoner", 0.3, 0.1),
        ("tool_selector", 0.05, 0.02),
        ("tool_executor", 0.8, 0.2),
        ("critic", 0.2, 0.05),
        ("finalizer", 0.1, 0.03)
    ]
    
    for op_name, base_time, variance in operations:
        # Simular latencia variable
        latency = base_time + random.uniform(-variance, variance)
        
        with span(op_name, step=1) as span_ctx:
            print(f"  üìç {op_name}: {latency:.3f}s")
            
            # Simular trabajo
            time.sleep(latency)
            
            # Simular √©xito/fallo ocasional
            if random.random() < 0.1:  # 10% de fallos
                raise Exception(f"Error simulado en {op_name}")
    
    print("‚úÖ Operaciones simuladas completadas")


def demonstrate_monitoring():
    """Demuestra las capacidades de monitoreo."""
    
    print("\nüìä Demostrando sistema de monitoreo...")
    
    # 1. Obtener KPIs
    print("\n1Ô∏è‚É£ KPIs del Sistema:")
    kpis = get_kpis()
    for category, metrics in kpis.items():
        print(f"  {category.upper()}:")
        for metric, value in metrics.items():
            print(f"    {metric}: {value}")
    
    # 2. Usar herramienta de monitoreo
    print("\n2Ô∏è‚É£ Herramienta de Monitoreo:")
    monitor = MonitorTool()
    
    # KPIs
    result = monitor(MonitorIn(action="kpis", format="summary"))
    print(f"  KPIs: {result.content['summary']}")
    
    # M√©tricas detalladas
    result = monitor(MonitorIn(action="metrics", format="summary"))
    print(f"  M√©tricas: {result.content['summary']}")
    
    # Dashboard
    result = monitor(MonitorIn(action="dashboard", format="summary"))
    print(f"  Dashboard: {result.content['summary']}")
    
    # Alertas
    result = monitor(MonitorIn(action="alerts", format="summary"))
    print(f"  Alertas: {result.content['summary']}")
    
    # Tendencias
    result = monitor(MonitorIn(action="trends", format="summary"))
    print(f"  Tendencias: {result.content['summary']}")


def demonstrate_advanced_features():
    """Demuestra caracter√≠sticas avanzadas."""
    
    print("\nüöÄ Demostrando caracter√≠sticas avanzadas...")
    
    # 1. Actualizar dashboard
    print("\n1Ô∏è‚É£ Actualizando Dashboard:")
    dashboard_update = update_dashboard()
    print(f"  Total SLOs: {dashboard_update['dashboard']['total_slos']}")
    print(f"  Alertas activas: {dashboard_update['dashboard']['active_alerts']}")
    print(f"  Violaciones: {dashboard_update['dashboard']['total_violations']}")
    
    # 2. M√©tricas detalladas
    print("\n2Ô∏è‚É£ M√©tricas Detalladas:")
    metrics = get_metrics_summary()
    print(f"  Operaciones monitoreadas: {len(metrics['operations'])}")
    
    for op_name, op_metrics in metrics['operations'].items():
        print(f"    {op_name}:")
        print(f"      Pasos: {op_metrics['total_steps']}")
        print(f"      √âxitos: {op_metrics['successful_steps']}")
        print(f"      Latencia P95: {op_metrics['latency_p95']:.1f}ms")
        print(f"      Tasa de √©xito: {op_metrics['tool_success_rate']*100:.1f}%")
    
    # 3. Exportar m√©tricas
    print("\n3Ô∏è‚É£ Exportaci√≥n de M√©tricas:")
    from src.core.metrics_dashboard import get_dashboard
    dashboard = get_dashboard()
    export_json = dashboard.export_metrics("json")
    print(f"  M√©tricas exportadas (JSON): {len(export_json)} caracteres")


def main():
    """Funci√≥n principal de demostraci√≥n."""
    
    print("üåü DEMO: Sistema de Observabilidad Avanzada")
    print("=" * 50)
    
    # Resetear m√©tricas para demo limpia
    reset_metrics()
    
    try:
        # 1. Simular operaciones del agente
        simulate_agent_operations()
        
        # 2. Demostrar monitoreo
        demonstrate_monitoring()
        
        # 3. Demostrar caracter√≠sticas avanzadas
        demonstrate_advanced_features()
        
        print("\nüéâ ¬°Demo completado exitosamente!")
        print("\nüí° Caracter√≠sticas implementadas:")
        print("  ‚úÖ M√©tricas P50/P95/P99 de latencia")
        print("  ‚úÖ Trazabilidad con correlation IDs")
        print("  ‚úÖ M√©tricas de costo y tokens")
        print("  ‚úÖ Dashboard de KPIs en tiempo real")
        print("  ‚úÖ SLOs y alertas autom√°ticas")
        print("  ‚úÖ Herramienta de monitoreo integrada")
        print("  ‚úÖ Exportaci√≥n de m√©tricas")
        print("  ‚úÖ An√°lisis de tendencias")
        
    except Exception as e:
        print(f"\n‚ùå Error durante la demo: {e}")
        print("Esto es normal en la primera ejecuci√≥n - las m√©tricas se acumulan con el tiempo")


if __name__ == "__main__":
    main()
